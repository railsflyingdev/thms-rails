{
  "name": "random-lib",
  "version": "0.1.5",
  "description": "A crypto.randomBytes wrapper for generating floats, bounded integers, and many of those at a time. Good for the browser, and for Node.JS.",
  "main": "index.js",
  "scripts": {
    "test": "grunt jshint test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/fardog/node-random-lib.git"
  },
  "engines": {
    "node": ">=0.10.22"
  },
  "keywords": [
    "random",
    "crypto",
    "integer",
    "float"
  ],
  "author": {
    "name": "Nathan Wittstock",
    "email": "nate@milkandtang.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/fardog/node-random-lib/issues"
  },
  "homepage": "https://github.com/fardog/node-random-lib",
  "dependencies": {
    "async": "^0.9.0",
    "debug": "^0.8.1"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-nodeunit": "^0.4.0",
    "grunt-testling": "^1.0.0",
    "nodeunit-browser-tap": "0.0.4",
    "testling": "^1.6.1",
    "underscore": "^1.6.0"
  },
  "testling": {
    "files": "test/browser_host.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest"
    ]
  },
  "readme": "# random-lib 0.1.5 [![Build Status](https://travis-ci.org/fardog/node-random-lib.svg)](https://travis-ci.org/fardog/node-random-lib)\n\nCreates random floats and bounded integers in the browser or in [Node.JS](http://nodejs.org).\n\n> **Warning:** I am not a cryptographer, or any sort of random number expert. An audit would be greatly appreciated.\n\n> **Note:** Browser support is currently experimental.\n\n[![browser support](https://ci.testling.com/fardog/node-random-lib.png)\n](https://ci.testling.com/fardog/node-random-lib)\n\n## Installation\n\nTo install the module for use in your projects:\n\n```\nnpm install random-lib\n```\n\n## Usage\n\n```js\nvar randomLib = require('random-lib');\nvar rand = new randomLib();\n```\n\nOptions are accepted, but are different if you're asking for floats or integers.\n\n### Options\n\n```js\n\n// for integers; what's shown are the defaults.\nvar options = {\n\tnum: 10, // number of ints to receive\n\tmin: 0, // minimum bound (inclusive)\n\tmax: 10, // maximum bound (inclusive)\n};\nrand.randomInts(options, function(err, results) {\n\tconsole.log(results); // [0, 8, 5, 1, 3, 9, 10, 5, 4, 9]\n});\n\n//for floats; what's shown are the defaults.\nvar options = {\n\tnum: 10 // number of floats to receive\n}\nrand.randomFloats(options, function(err, results) {\n\tconsole.log(results);\n});\n```\n\n### Functions\n\n#### randomInts([options], callback (err, results)) \n\nGet an array of random integers.\n\n#### randomUniqueInts([options], callback (err, results))\n\nGet an array of random unique integers.\n\n#### randomInt([options], callback (err, results))\n\nConvenience function to get a single random integer.\n\n#### randomFloats([options], callback (err, results))\n\nGet an array of random floats between 0 and 1.\n\n#### randomUniqueFloats([options], callback (err, results))\n\nGet an array of random unique floats between 0 and 1.\n\n#### randomFloat([options], callback (err, results))\n\nConvenience function to get a single random float between 0 and 1.\n\n\n## Environment Variables\n\n- **RAND_ALLOW_PRNG**\nSet this environment variable to allow fallback to Node's `crypto.pseudoRandomBytes()` function if we fail to get entropy from `crypto.randomBytes()`. This decreases the quality of the random numbers, but will stop us from throwing an error.\n\n- **RAND_BUFFER_SIZE**\nHow many bytes of entropy we create in a single go. Internally, we create a buffer of entropy and then use it until it's exhausted, then refill the buffer. A small buffer exhausts more quickly, but generates faster and uses less memory. Default is 512 bytes. This value cannot be less than 256 bytes.\n\n## Known Issues\n\n- Testling claims failure on a number of browsers when generating large quantities of numbers, but it doesn't fail consistently. This needs to be investigated further.\n\n## Contributing\n\nFeel free to send pull requests! I'm not picky, but would like the following:\n\n1. Write tests for any new features, and do not break existing tests.\n2. Be sure to point out any changes that break API.\n\n## History\n\n- **v0.1.5**  \nTests browser support. Adds [testling](https://ci.testling.com/) for automated tests.\n\n- **v0.1.4**  \nAvoids [releasing Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony) on errors.\n\n- **v0.1.3**  \nBug fixes.\n\n- **v0.1.2**  \nAdds `randomUniqueInts` and `randomUniqueFloats` for arrays with unique numbers.\n\n- **v0.1.1**  \nRemove peerDependencies.\n\n- **v0.1.0**  \nInitial release.\n\n## The MIT License (MIT)\n\nCopyright (c) 2014 Nathan Wittstock\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "random-lib@0.1.5",
  "dist": {
    "shasum": "0a584ae2cafeeb963db546cb9db630f1b5c7c249"
  },
  "_from": "random-lib@^0.1.4",
  "_resolved": "https://registry.npmjs.org/random-lib/-/random-lib-0.1.5.tgz"
}
