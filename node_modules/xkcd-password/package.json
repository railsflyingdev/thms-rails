{
  "name": "xkcd-password",
  "version": "0.2.6",
  "description": "A module (and commandline) for generating XKCD-style passwords.",
  "main": "index.js",
  "bin": {
    "xkcd-password": "./bin/xkcd-password"
  },
  "scripts": {
    "test": "grunt jshint test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/fardog/node-xkcd-password.git"
  },
  "engines": {
    "node": ">=0.10.22"
  },
  "keywords": [
    "password",
    "xkcd"
  ],
  "author": {
    "name": "Nathan Wittstock",
    "email": "code@fardogllc.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/fardog/node-xkcd-password/issues"
  },
  "homepage": "https://github.com/fardog/node-xkcd-password",
  "dependencies": {
    "async": "^0.9.0",
    "debug": "^0.8.0",
    "nomnom": "^1.7.0",
    "random-lib": "^0.1.4"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-nodeunit": "^0.3.3",
    "grunt": "^0.4.4",
    "grunt-cli": "^0.1.13",
    "underscore": "^1.6.0"
  },
  "readme": "# XKCD Password Generator 0.2.6 [![Build Status](https://travis-ci.org/fardog/node-xkcd-password.svg)](https://travis-ci.org/fardog/node-xkcd-password)\n\nCreates an [XKCD-style password](http://xkcd.com/936/) based on your parameters. Includes a CLI (`xkcd-password`) for your convenience, and a default wordlist.\n\n> **Warning:** I am not a cryptographer, or any sort of password expert. An audit would be greatly appreciated.\n\n## Installation\n\nTo install the module for use in your projects:\n\n```\nnpm install xkcd-password\n```\n\nOr a global install to get the commandline client:\n\n```\nnpm install xkcd-password -g\n```\n\nThis will make the `xkcd-password` command available on your path.\n\n## Usage\n\nThis can be used both as a module in another application, or when installed \nglobally, via a commandline application.\n\n### CLI\n\n```\n$ xkcd-password --help\n\nUsage: xkcd-password [options]\n\nOptions:\n   -n, --numWords    The number of words to generate for your password.  [4]\n   -m, --minLength   Minimum lengh of words chosen for the generated password.  [5]\n   -x, --maxLength   Maximum length of words chosen for the generated password.  [8]\n   -f, --wordFile    The newline-delimited list of words to be used as the source.\n   -s, --separator   The separator character to use between words when output to the console.  [ ]\n   --version         print version and exit\n```\n\n### Module\n\n```js\nvar xkcdPassword = require('xkcd-password');\nvar pw = new xkcdPassword();\n\nvar options = {\n    numWords: 4,\n    minLength: 5,\n    maxLength: 8\n};\n\npw.generate(options, function(err, result) {\n    console.log(result); // ['distome', 'pantries', 'sending', 'weiner']\n});\n```\n\n## Environment Variables\n\nInternally, we use [random-lib][randomlib] for our random number generator, which uses the following environment variables:\n\n- **RAND_ALLOW_PRNG**\nSet this environment variable to allow fallback to Node's `crypto.pseudoRandomBytes()` function if we fail to get entropy from `crypto.randomBytes()`. This decreases the quality of the random numbers, but will stop us from throwing an error.\n\n- **RAND_BUFFER_SIZE**\nHow many bytes of entropy we create in a single go. Internally, we create a buffer of entropy and then use it until it's exhausted, then refill the buffer. A small buffer exhausts more quickly, but generates faster and uses less memory. Default is 512 bytes. This value cannot be less than 256 bytes.\n\n## Known Bugs\n\n- Trying to generate more a large number of words in a single `generate()` call may overflow the call stack. You'll usually be fine up to 2500 words though so it's not much of a problem.\n- Due to an oddity in how [nomnom][nomnom] handles certain characters, you need to use the long form of the separator option when using some characters on the command line, e.g. `xkcd-password --separator='-'` for dash separators.\n\n[nomnom]: https://github.com/harthur/nomnom\n\n## Contributing\n\nFeel free to send pull requests! I'm not picky, but would like the following:\n\n1. Write tests for any new features, and do not break existing tests.\n2. Be sure to point out any changes that break API.\n\n## History\n\n- **v0.2.6**  \nUpdates to the latest version of [async][async], so that xkcd-password and [random-lib][randomlib] use the same version.\n\n- **v0.2.5**  \nAdditional tests.\n\n- **v0.2.4**  \nAvoids [releasing Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony) on errors.\n\n- **v0.2.3**  \nSmarter rewrite of word generation function based on additional functionality that [random-lib][randomlib] provides. Additional tests.\n\n- **v0.2.2**  \nNow uses my [random-lib][randomlib] wrapper for `crypto.randomBytes()`.\n\n- **v0.2.1**  \nNow uses Node's `crypto.randomBytes()` for its PRNG, rather than Math.random() in most cases.\n\n- **v0.2.0**  \nChanges generation function to accept an \"options\" object rather than discrete parameters to the generate function. Provides defaults if options aren't given.\n\n[async]: http://github.com/caolan/async/\n[randomlib]: http://www.npmjs.org/package/random-lib/\n\n## The MIT License (MIT)\n\nCopyright (c) 2014 Nathan Wittstock\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## Grady Ward's Moby\n\nThis project includes a wordlist taken from Grady Ward's Moby II, a list of \nwords that has been placed in the public domain.\n\n### License\n\nThe Moby lexicon project is complete and has\nbeen place into the public domain. Use, sell,\nrework, excerpt and use in any way on any platform.\n\nPlacing this material on internal or public servers is\nalso encouraged. The compiler is not aware of any\nexport restrictions so freely distribute world-wide.\n\nYou can verify the public domain status by contacting\n\nGrady Ward\n3449 Martha Ct.\nArcata, CA  95521-4884\n\n",
  "readmeFilename": "README.md",
  "_id": "xkcd-password@0.2.6",
  "dist": {
    "shasum": "8bd83215af6f6776ddec456685e752ef95840d96"
  },
  "_from": "xkcd-password@^0.2.0",
  "_resolved": "https://registry.npmjs.org/xkcd-password/-/xkcd-password-0.2.6.tgz"
}
